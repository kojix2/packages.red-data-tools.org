# -*- ruby -*-

ENV["CENTOS_VERSIONS"] ||= "7"

require_relative "../vendor/arrow/dev/tasks/linux-packages/package-task"

class ParquetGLibPackageTask < PackageTask
  def initialize
    release_time = latest_commit_time(source_dir)
    super("parquet-glib", detect_version(release_time), release_time)
  end

  private
  def source_dir
    File.join(__dir__, "..", "vendor", "parquet-glib")
  end

  def detect_version(release_time)
    configure_ac_path = File.join(source_dir, "configure.ac")
    /^AC_INIT\(\[.+?\], \[(.+?)\]\)$/ =~ File.read(configure_ac_path)
    version = $1
    formatted_release_time = release_time.strftime("%Y%m%d")
    if git_describe == version
      version
    else
      "#{version}.#{formatted_release_time}"
    end
  end

  def git_describe
    cd(source_dir) do
      return `git describe`.strip
    end
  end

  def define_archive_task
    file @archive_name do
      if /\A\d+\.\d+\.\d+\z/ =~ @version
        download_archive
      else
        build_archive
      end
    end
  end

  def download_archive
    base_url = "https://github.com/red-data-tools/parquet-glib/releases/download"
    download("#{base_url}/#{@version}/parquet-glib-#{@version}.tar.gz", ".")
  end

  def build_archive
    cd("../vendor/parquet-glib") do
      sh("./autogen.sh")
      rm_rf("build")
      mkdir_p("build")
      cd("build") do
        sh({
             "PKG_CONFIG_PATH" => "/tmp/local/lib/pkgconfig",
           },
           "../configure",
           "--prefix=/tmp/local",
           "--enable-gtk-doc",
           "--enable-debug")
        sh({
             "LD_LIBRARY_PATH" => "/tmp/local/lib",
           },
           "make", "-j8",
           "INTROSPECTION_SCANNER_ARGS=--add-include-path=/tmp/local/share/gir-1.0",
           "INTROSPECTION_COMPILER_ARGS=--includedir=/tmp/local/share/gir-1.0")
        sh("make", "dist")
        tar_gz = Dir.glob("*.tar.gz").first
        sh("tar", "xf", tar_gz)
        mv(File.basename(tar_gz, ".tar.gz"),
           @archive_base_name)
        sh("tar", "czf", @full_archive_name, @archive_base_name)
        rm_rf("build")
      end
    end
  end
end

task = ParquetGLibPackageTask.new
task.define
